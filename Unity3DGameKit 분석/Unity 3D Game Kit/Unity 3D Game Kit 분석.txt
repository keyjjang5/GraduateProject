카메라는 월드의 일부를 비추고 있고 그 위에 메뉴와 로고가 들어간 간단한 UI만이 위치한다.
> 시작화면에서 scene전환을 통해 게임으로 진입하지 않고 UI제거와 카메라 이동으로만 게임으로 진입한다.

분석하면서 알게된 내용들이 너무 압도적이라 충격적이다. 어떻게 이렇게 많은 기능이 엔진하나에서 관리되고 사용되는 것인지 신기할 정도다.

대부분의 스크립트가 namespace Gamekit3D에 속해있다.
> 왜 이렇게 큰 규모의 네임스페이스를 사용한 것일까?
 > 프로젝트의 소속을 명확히 하기위해서
  > 다른프로젝트와의 충롤을 일으키지 않고, 이 스크립트가 어떤 프로젝트에 사용 되었는지를 확실히 하기 위해서
 > 일반적인 namespace의 목적처럼 같은 이름의 class끼리의 중복으로 인한 오류를 방지하기 위해서
 >> 첫번째 이유가 더 크다고 생각한다. 왜냐하면 같은 이름의 class가 발생할수도 있지만 많은 class가 이 게임에 맞춰진 이름을 가지기 때문이다. 몬스터의 행동에 대한 class의 경우에는 몬스터의 이름이 들어가는 것 처럼 말이다. 하지만 첫번쨰 이유인 소속을 확실히 하기 위해서 라는 이유는 이 스크립트들이 혹시라도 다른 프로젝트에 섞여 들어갔을 때 구분짓기 가장 쉬운 방법이다. namespace가 다른프로젝트명으로 명명되어 있으면 이 스크립트가 잘못 섞여 들어왔다는 것을 바로 알 수 있기때문이다.
 >> 생각해보면 두번쨰 이유도 충분한 사유가 된다. player를 기본으로 하는 스크립트들이나 기본적인 시스템을 위한 스크립트들의 이름은 충분히 다른 곳에서 사용될 여지가 있다.

Packages에 있는 내용은 유니티 에셋들을 다운로드하여 사용한 것들이다.
> 기본에셋들과 Unity technologies의 것들 같다.

Start 분석
1. System, UI, SceneAssets을 구분
System
