Main Camera : Post Process 컴포넌트를 가지고 있다.
> 게임 화면을 만드는 카메라로 Post Process효과에 의해 화면이 바뀐다.
> 시작 화면의 배경을 찍고 있다.

SceneController
> public static SceneController Instance 를 가지고 있다
 > 자기 자신을 static객체로 클래스에서 가지고 있다는 것은 언제든지 접근이 가능한 클래스 라는 것으로 항상 존재한다.
 > 대문자로 시작하는 이유는 public으로 외부에 보이는 것이고 static이기 때문에 어느이유로도 가능하지만 Unity의 특성상 static이어서 그렇다고 생각된다.
 > Property를 사용하고 있다. (getter함수)
 >> 있으면 반환 없으면 탐색 없으면 제작의 3단계로 구성
 >> static은 시작할 때부터 만들어져서 시스템이 종료할 때까지 존재하는데 왜 이렇게 구성했을까?
  > 간단히 생각하면 안정성 때문이겠지만 불필요한 안정성은 필요 없다
  > 내생각엔 Instance가 다른것을 가리키게 되거나 자료에 오류가 생겨서 값이 바뀌었을때를 위해서 넣은것 같다. 따지고 보면 안정성이 맞는것 같다
  > 그러면 모든 static에는 이런 처리를 해줘야 하는것일까?

protected static SceneController instance
> 처음 보고 Instance가 있는데 왜 instance를 따로 만들었을까 했다. 하지만 instance가 사용된 곳을 보니 왜 public변수와 protected 변수를 따로 만들었는지 알 것 같다.
 > protected 변수는 실질적으로 값을 가지는 변수이다. 여기에 실제 instance가 들어가게 되고 이것은 외부로는 보이지 않는다.
 > public 변수는 protected를 외부에 보여주는 역할을 한다. 같은 변수를 가리키지만 setter함수는 만들지 않아서 외부로 부터의 값 변경을 차단하고 내부에서 동작하던 instance의 값만 반환하여 볼 수 있게 만들었다.
 > getter로 1차적으로 막고 그것으로 모잘라서 protected와 public으로 구분하여 2차적으로 외부의 접근을 차단하고 있다.
 > 이정도 까지 해야하나 하는 생각이 들었지만 최근에 치트오매틱으로 문제가 됐던 '에픽세븐'의 경우에서 캡슐화를 제대로 하지 않아 더욱 취약했다는 얘기가 떠오르면서 이런것을 캡슐화라고 하는것 같다는 생각이 들었다.

Create()라는 함수가 있다.
> public static SceneController인데 왜 public으로 되어있는지 지금 단계에서는 잘 모르겠다. SceneController를 생성하는 함수인데 외부에서 사용할 필요가 있나? 어차피 생성되고 반환되는 것은 내부변수인 instance인데 말이다.
> 왜 gameObject 즉 자기자신을 바로 사용하지 않고 따로 객체를 만들어서 사용하나 했는데 생각해보니 static형 이기때문에 항상 존재해야한다. 항상 존재해야하는 것은 gameObject처럼 자기자신이 생성되어야 가져올 수 있는 값은 가져올수 없기때문에 스스로 게임오브젝트를 만들어서 가지고 있는 것이었다.

SceneTransitionDestination
> 제작한 다른 클래스 인듯하다. 이름으로 보아 화면 전환에 관련 되어있을 것 같다.

PlayerInput
> 다음 행동이 일어 났을 때 이벤트 메시지 같은 방식으로 통지된다.
> 1) 동작이 트리거될 때, 2) 플레이어가 기기를 분실 또는 회수할 때, 3) 플레이어가 다른 제어 시스템으로 전환될 때, 4) 플레이어가 바인딩을 변경할 때,

Awake()
> 처음부터 어썸하다 if(Instance != this) 로 시작하는데 getter에 create가 있으니 어떻게 찾아야 하나 싶었었다. 하지만 생각해보니 저 문장에서 Instacne를 사용하려면 호출 즉 getter를 실행시켜야하고 그렇게 실행될때 처음이기 때문에 create()가 실행되어 Instance를 생성하고 호출한다.
> 그리고 곧바로 DontDestroyOnLoad에 등록한다.

static으로 존재하는 모든 함수는 Instance에서 시작하는 형태를 가지고 있다.

static으로 만든건 그대로 존재만 해라 라는듯이 public static으로 만들어진 모든 함수가 SceneControllerWrapper에서 그대로 가저와 사용하고 있다.
내부 구현과 외부 사용을 완벽하게 구분짓는 모습이다.
> SceneControllerWrapper : SceneController를 외부에서 사용하는 방법으로 채택된 클래스
 > SceneController의 public static함수들을 사용한다.

CharacterStateSetter
> 내부에 ParameterSetter라는 클래스를 만들었다
 > 이를 유니티 시스템에 인식시키기 위해 [Serializable]를 사용해줬다.
 > hash를 사용해서 애니메이터의 특정값과 연결 시킨다. 물론 hash는 외부로 드러나지 않는다

SceneTransitionDestination : 어디로 이동할지의 값만 가지고 있고 다른곳에서 참고해서 사용하는 클래스 같다.

TransitionPoint : 이름을 봐서는 씬을 바꾸는 클래스인데 정확히 어떤일을 하는지 파악이 안된다. 값들이 모두 선언만되어있고 초기화가 안되어있어서 더 모르겠다
> 오브젝트의 위치를 다른 씬, 다르고 게임플레이 화면이 아닌씬, 같은 씬으로 움직이는 클래스같다.
